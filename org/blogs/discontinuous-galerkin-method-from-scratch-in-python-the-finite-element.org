#+SETUPFILE: ./blog-styles.org
#+TITLE: DG Method From Scratch (in Python) - The Element
#+SUBTITLE: and how to pick the right one for your simulation 
#+HTML: <p class="date"><i>last update: Feb 3, 2025</i></p>

#+CAPTION: Examples of simple Lagrage elements with optimized quadrature points (shown in blue)
#+NAME: threexthree-lagrange-grid
#+ATTR_HTML: :alt Visualzations of simple Lagrage elements with optimized quadrature points :class hero-image 
[[../../public/3x3lagrange-grid.png]]

* Article Motivation 
#+BEGIN_QUOTE
- What is a finite element?
- How does it relate to a mesh?
- Which is the right element for my simulation?
- Code it in python.
#+END_QUOTE

* What is a finite element?
*Note*: /were talking about specific elements that are used in finite element analysis (FEA), not the finite element method (FEM) as a whole./

A finite element is a mathematical tool that serves as *building block for a numerical simulation* that uses the finite element method for its spatial discretization.

The rigous mathematical definition is usually taken from /The Mathematical Theory of Finite Element Methods/ by Brenner and Scott [cite:@brenner2008mathematical]. Their definition expands on the classic 1978 definition from P. Ciarlet [cite:@ciarlet1978finite].

#+BEGIN_emphasis
A finite element is a set that contains the following three objects:
1. A domain, $\mathcal{T}$, (a subset of $\mathbb{R}^n$  with a piecewise smooth boundary.
2. A space of basis functions, $\mathcal{V}$.
3. A set of degrees of freedom, $\mathcal{N} = {N_1, N_2, ..., N_k}$.
#+END_emphasis

If you are interested in their mathematical properties, you should note that *the degrees of freedom*, $\mathcal{N}$ *form a basis for the dual space of P (called $\mathcal{P'}$)*.

#+BEGIN_extra
/What is the dual space of a vector space?/

If $V$ is a vector space over the real numbers $\mathbb{R}$, then the /dual space of V/, denoted $V'$ is the set of all linear functionals that map $V \rightarrow \mathbb{R}$. This means all functions that can map a vector in $V$ to a scalar in $\mathbb{R}$. This includes things like summing all the elements, or finding the mean, or projecting the vector onto an axis.
#+END_extra

If you found the *set of degrees of freedom* in the definition of a finite element to be confusing, its because this definition is attempting to be as general as possible, and encompass all possible types of finite elements.

Consider a very simple finite element, a *Lagrange* element on a tetrahedral mesh. The volume of the element is the reference tetrahedron. The space of basis functions is a set of polynomials. The degrees of freedom are just the evaluation of these basis functions /at specific points/. In this case we can think of the nodal variables as just a set of points on the tetrahedron.

However, other elements are not so simple. Take the *Nédélec* element for example, which also works on a tetrahedral mesh. The volume is also a tetrahedron. The space of basis functions is also a finite polynomial space. But the Nédélec element is a /H(curl)-conforming element/, which means that it ensures the continuity of tangential components of the solution (necessary for electromagnetics simulations for example). To achieve this, the degrees of freedom of the lowest order 3D Nédélec element (of the first kind) are integrals over the edges of the element, of the solution doted with the tangent vector [cite:@logg2012fenics]

* What types of finite elements exist?
A lot.

Check out [[https://defelement.org/elements/index.html][DefElement]] for a alphabetical list of most of them.

* How do I find out which element I need?
There are some questions you can ask to narrow it down:

** What function space do you need?
Maxwell's equations, for example, require a curl conforming element (the curl of the field has to be continuous). *Nédélec* elements would be a great first choice.

** What type of mesh are you using?
A tetrahedral [[https://govango.org/blogs/what-is-a-computational-mesh][mesh]] requires tetrahedral elements. *Lagrange* elements are a perfect first choice for tetrahedral elements with scalar unknowns.

** Do you need to reduce computational time?
If you're using a parallelepiped mesh, *serendipity* elements might be a good starting choice.

In my case, I want to simulate ultrasound waves passing through the brain. That's a complex geometry so I want a unstructured tetrahedron mesh. I'm using a linear acoustic wave equation so *Lagrange elements* will be perfect to start. I can always adapt in the future. Based on this PhD thesis[cite:@vandekerckhove2016simulation] I should start with 3rd order basis functions as they seem to scale the best.

* Whats a 3rd order Lagrange element?
#+BEGIN_emphasis
A third order, 3D Lagrange element is defined by the following triplet:
1. A tetrahedron domain.
2. A set of polynomial basis functions up to order 3.
3. A set of points where the basis functions are evaluated.
#+END_emphasis

Just to recap (for the sake of rigorous mathematics) the degrees of freedom of this Lagrange element are a set of points where the basis functions are evaluated. These are our unknowns that we will solve for. We can use these to recreate the solution in each cell.

That means that we have a choice of where to evaluate our basis functions. We can chose whatever /quadrature points/ we want.

* 3rd order Lagrange element degrees of freedom
A common way of finding the degrees of freedom on a 3rd order Lagrange element is to choose equidistant points. Unfortunately, this can often cause unwanted oscillations in the solution due to Runge's phenomenon.

Another common choice is to make our basis functions Lagrange functions, and to evaluate them at Gauss-Lobatto_Legendre (GLL) points. These points are clustered towards the ends of the element, and reduce the spurious oscillations.

An even better way is to use the *Warp and Blend* points from Hesthaven and Warburton's book [cite:@hesthaven2008nodal]. They've found a way to further reduce the oscillations by algorithmically defining the position of each point.

Theoretically, the best way would be to minimized something called the /Lebesgue constant/ directly. The Lebesgue constant is a measure of the unwanted spurious oscillations that occur as a result of the choice of points. Francesca Rapetti et al did this for polynomial degrees up to 18 *in two dimensions* in their 2012 paper (see [cite:@rapetii2012generation]) 

For three dimensions the best quadrature points I have seen were created by Tobin Isaac (see [cite:@isaac2020recursive]). You can check out the implementation in the link in the references at the bottom of the page. I won't get into it here, but going forward I'll use Isaac's ~recursive_nodes~ package to find the nodal positions.

* Python Code
Lets build a python class callsed ~LagrangeElement~ for a *3rd order Lagrange element on a tetrahedron*. 

As we said before, this class should contain a *set of points* (often called  the *degrees of freedom*) some *basis functions* (in this case, 3rd order Lagrange basis functions), an it should be expressed on some *volume*.

#+BEGIN_emphasis
/Do I have to make a separate element for each cell in my mesh?/

No. Typically all the calculations are done on a *reference element*, and then mapped to each cell in the mesh via a linear /affine/ transformation. Right now we are just going to build that reference element.
#+END_emphasis

*Volume*: The reference tetrahedron for an unstructured mesh, with vertices at $(0,0,0), (0,1,0), (0,0,1), (1,0,0)$.

*Nodal basis*: We're using the optimized points from the ~recursivenodes~ code.

*Basis functions*: third order Lagrange functions. We'll use ~scipy~'s implementation of the Jacobi polynomials.

Lets start by creating a reference volume as a python class. We can then import this and use it in our ~LagrageElement~ class
#+BEGIN_SRC python
import numpy as np

class Tetrahedron:
    def __init__(self):
        # Define the vertices of the Tetrahedron
        self.vertices = np.array([[0, 0, 0],
                                  [0, 1, 0],
                                  [0, 0, 1],
                                  [1, 0, 0]])

#+END_SRC

#+BEGIN_SRC python
from reference_domains import Tetrahedron
from recursivenodes import recursivenodes

class LagrangeElement:
    def __init__(self, d, n):
        # d is the dimension, n is the order of the polynomial basis functions
        self.d = d
        self.n = n
        
        # Initialize the domain as an instance of Tetrahedron
        self.domain = Tetrahedron()
        
        # Generate nodes using recursivenodes
        self.nodes = recursivenodes(d, n, domain='unit')
#+END_SRC

Great, now we've got a very simple finite element. Lets plot it to see what it looks like.

* Plotting
#+CAPTION: Grid of Lagrange Elements for various degrees of freedom (y-axis) and polynomial order (x-axis). Code is available in the ~plotting~ directory of the corresponding code [[https://github.com/go-van-go/govango-code/tree/main/finite-elements-from-scratch-in-python][in the github repo]]
#+NAME: 3x5-lagrange-element-grid
#+ATTR_HTML: :alt Grid of lagrange elements for various degrees of freedom and polynomial order :class tall-image
[[../../public/lagrange-grid.png]]


* References
#+print_bibliography:
